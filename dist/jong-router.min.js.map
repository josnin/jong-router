{
  "version": 3,
  "sources": ["../src/jong-router.js"],
  "sourcesContent": ["// jong-router.ts\nclass JongRouter {\n    routes;\n    outlet;\n    shadowRoot1;\n    constructor(routes, outlet, shadowRoot1) {\n        this.routes = routes;\n        this.outlet = outlet;\n        this.shadowRoot1 = shadowRoot1;\n    }\n    init() {\n        this.setupNavigation();\n        this.navigate();\n    }\n    setupNavigation() {\n        window.addEventListener('popstate', () => this.navigate());\n        document.addEventListener('click', (event) => this.handleClick(event));\n    }\n    navigate() {\n        const path = window.location.pathname;\n        const matchedRoute = this.routes.find(route => this.matchRoute(route.pattern, path));\n        if (matchedRoute) {\n            if (matchedRoute.guards) {\n                const guardsRes = matchedRoute.guards.every(guard => {\n                    const guardFn = guard.bind(this)();\n                    if (!guardFn) {\n                        if (matchedRoute.redirect) {\n                            this.navigateTo(matchedRoute.redirect);\n                        }\n                        else {\n                            console.warn('Guard prevented navigation, and no redirect route specified!');\n                        }\n                    }\n                    return guardFn === true;\n                });\n                // dont proceed if\n                // aggregate result is false\n                if (guardsRes === false)\n                    return;\n            }\n            if (matchedRoute.component) {\n                this.loadComponent(matchedRoute.component, this.extractRouteParams(matchedRoute.pattern, path), matchedRoute.data);\n            }\n            else if (matchedRoute.html) {\n                this.loadContent(matchedRoute.html);\n            }\n            else {\n                console.warn('no component or html route specified!');\n            }\n            return;\n        }\n        // to handle users navigating to a path not defined in the routes\n        // example page not found\n        const notMatchedRoute = this.routes.find(route => route.pattern === '**');\n        if (notMatchedRoute) {\n            if (notMatchedRoute.component) {\n                this.loadComponent(notMatchedRoute.component, this.extractRouteParams(notMatchedRoute.pattern, path), notMatchedRoute.data);\n            }\n            else if (notMatchedRoute.html) {\n                this.loadContent(notMatchedRoute.html);\n            }\n        }\n    }\n    loadContent(html) {\n        //const app = document.getElementById(this.app);\n        //if (app) app.innerHTML = html;\n        this.outlet.innerHTML = html;\n    }\n    async loadComponent(componentImport, params, data) {\n        componentImport\n            .then(module => {\n            const ComponentClass = module.default;\n            const component = new ComponentClass();\n            const queryParams = this.extractQueryParams();\n            if (params)\n                component.setAttribute('route-params', JSON.stringify(params));\n            if (data)\n                component.setAttribute('route-data', JSON.stringify(data));\n            if (queryParams)\n                component.setAttribute('query-params', JSON.stringify(queryParams));\n            // pass all router functional to components\n            // to reuse functions inside components\n            component.router = this;\n            // clean\n            this.outlet.innerHTML = '';\n            // can only append \n            this.outlet.appendChild(component);\n        })\n            .catch(error => {\n            console.error(`Error loading component: ${error}`);\n            //document.getElementById(this.app)!.innerHTML = 'Component not found'\n            this.outlet.innerHTML = 'Component not found';\n        });\n    }\n    handleClick(event) {\n        // @ts-ignore\n        const isInsideShadowDom = event.composedPath().includes(this.shadowRoot1);\n        const target = isInsideShadowDom ? event.composedPath()[0] : event.target;\n        if ((target instanceof HTMLAnchorElement || target instanceof HTMLButtonElement) &&\n            target.hasAttribute('router-link')) {\n            event.preventDefault();\n            //const href = event.target.getAttribute('href');\n            const href = target.getAttribute('href');\n            window.history.pushState({}, '', href);\n            this.navigate();\n        }\n    }\n    matchRoute(pattern, path) {\n        const patternSegments = pattern.split('/').filter(segment => segment !== '');\n        const pathSegments = path.split('/').filter(segment => segment !== '');\n        return patternSegments.length === pathSegments.length &&\n            patternSegments.every((patternSegment, i) => patternSegment.startsWith(':') || patternSegment === pathSegments[i]);\n    }\n    extractQueryParams() {\n        const queryString = window.location.search;\n        const params = new URLSearchParams(queryString);\n        const queryParams = {};\n        params.forEach((value, key) => {\n            queryParams[key] = value;\n        });\n        return queryParams;\n    }\n    extractRouteParams(pattern, path) {\n        return pattern.split('/').reduce((params, segment, i) => {\n            if (segment.startsWith(':')) {\n                // @ts-ignore\n                params[segment.slice(1)] = path.split('/')[i];\n            }\n            return params;\n        }, {});\n    }\n    navigateTo(route) {\n        window.history.pushState({}, '', route);\n        this.navigate();\n    }\n}\nexport default JongRouter;\n"],
  "mappings": "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",
  "names": ["JongRouter", "routes", "outlet", "shadowRoot1", "event", "path", "matchedRoute", "route", "guard", "guardFn", "notMatchedRoute", "html", "componentImport", "params", "data", "module", "ComponentClass", "component", "queryParams", "error", "target", "href", "pattern", "patternSegments", "segment", "pathSegments", "patternSegment", "queryString", "value", "key", "i", "jong_router_default"]
}
